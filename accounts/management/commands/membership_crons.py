import datetime

from django.conf import settings
from django.core.management.base import BaseCommand, CommandError
from django.core.mail import send_mail, EmailMultiAlternatives
from django.template.loader import get_template
from django.template import Context

from accounts.models import RhizomeUser,RhizomeMembership
from support.models import MembershipLevel, AutoGeneratedEmail

#####
### CRON JOB THAT SENDS EMAILS
#####
class Command(BaseCommand):
    """
    CRON JOB FOR
        - SENDING RHIZOME MEMBERS EXPIRATION NOTICES AT 30, 15, AND DAY OF INTERVALS
        - UPDATING EXPIRED ACCOUNTS

    SHOULD BE SET FOR 11:58pm or so...
    """

    def handle(self, *args, **options):
        pass
        '''
        turn off cron emails during the community campaign
        '''
        # self.send_thirty_day_notices()
        # self.send_fifteen_day_notices()
        # self.send_expired_today_notices()
        # self.send_fourteen_day_expired_email()
        # self.send_user_30d_conversion_email()
        # self.send_user_60d_conversion_email()

    def send_thirty_day_notices(self):
        thirty_days_from_today = (datetime.datetime.today() + datetime.timedelta(30))
        last_fourteen_days = (datetime.datetime.today() - datetime.timedelta(14))
        results = None

        thirty_day_members = RhizomeMembership.objects \
            .filter(member_tools_exp_date__day = thirty_days_from_today.day) \
            .filter(member_tools_exp_date__year = thirty_days_from_today.year) \
            .filter(member_tools_exp_date__month = thirty_days_from_today.month) \
            .filter(complimentary = False) \
            .filter(org_sub_admin=False) \
            .filter(org_sub = None) \
            .filter(user__is_active = True) \
            .exclude(last_reminder_email__gte = last_fourteen_days) \

        if thirty_day_members:
            emails = []
            for membership in thirty_day_members:
                self.send_30day_till_expired_email(membership)
                membership.last_reminder_email = datetime.datetime.now()
                membership.save()

                emails.append("%s" % membership.user.email)

            email_string = ', '.join(["%s" % e for e in emails])
            results = "%s members received expire in 30 days emails: %s" % (len(emails), email_string)
        else:
            results = "no members expire in 30 days"

        #send email to staff with details of sending
        send_mail('30 Day Emails Cron', '%s' % results, settings.DEFAULT_FROM_EMAIL,
                [settings.MEMBERSHIP_GROUP_EMAIL], fail_silently=False)

    def send_fifteen_day_notices(self):
        fifteen_days_from_today = (datetime.datetime.today() + datetime.timedelta(15))
        last_fourteen_days = (datetime.datetime.today() - datetime.timedelta(14))
        results = None

        fifteen_day_members = RhizomeMembership.objects \
            .filter(member_tools_exp_date__day = fifteen_days_from_today.day) \
            .filter(member_tools_exp_date__month = fifteen_days_from_today.month) \
            .filter(member_tools_exp_date__year = fifteen_days_from_today.year) \
            .filter(complimentary = False) \
            .filter(org_sub_admin=False) \
            .filter(org_sub = None) \
            .filter(user__is_active = True) \
            .exclude(last_reminder_email__gte = last_fourteen_days) \

        if fifteen_day_members:
            emails = []
            for membership in fifteen_day_members:
                self.send_15day_till_expired_email(membership)
                membership.last_reminder_email = datetime.datetime.now()
                membership.save()

                emails.append("%s" % membership.user.email)

            email_string = ', '.join(["%s" % e for e in emails])
            results = "%s members received expire in 15 days emails: %s" % (len(emails), email_string)
        else:
            results = "no members expire in 15 days"

        #send email to staff with details of sending
        send_mail('15 Day Emails Cron', '%s' % results, settings.DEFAULT_FROM_EMAIL,
                [settings.MEMBERSHIP_GROUP_EMAIL], fail_silently=False)


    def send_expired_today_notices(self):
        today = datetime.datetime.today()
        last_fourteen_days = (datetime.datetime.today() - datetime.timedelta(14))

        expired_today_members = RhizomeMembership.objects \
            .filter(member_tools_exp_date__day = today.day) \
            .filter(member_tools_exp_date__month = today.month) \
            .filter(member_tools_exp_date__year = today.year) \
            .filter(complimentary = False) \
            .filter(org_sub_admin=False) \
            .filter(org_sub = None) \
            .filter(user__is_active = True) \
            .exclude(last_homecoming_email__gte = last_fourteen_days)

        if expired_today_members:
            emails = []
            for membership in expired_today_members:
                self.send_expires_today_email(membership)
                membership.last_reminder_email = datetime.datetime.now()
                membership.member_tools = 0 # SET ACCT AS EXPIRED
                membership.archival_access = 0 # SET ACCT AS EXPIRED
                membership.archival_access_exp_date = today
                membership.member_tools_exp_date = today
                membership.membership_level = MembershipLevel.objects.get(internal_title="user")
                membership.save()

                emails.append("%s" % membership.user.email)

            email_string = ', '.join(["%s" % e for e in emails])
            results = "%s members received expired today emails: %s" % (len(emails), email_string)
        else:
            results = "no members expire today"

        #send email to staff with details of sending
        send_mail('Expires today Emails Cron', '%s' % results, settings.DEFAULT_FROM_EMAIL,
                [settings.MEMBERSHIP_GROUP_EMAIL], fail_silently=False)

    def send_fourteen_day_expired_email(self):
        two_weeks_ago = datetime.datetime.today() - datetime.timedelta(7)
        last_six_days = datetime.datetime.today() - datetime.timedelta(6)

        expired_members = RhizomeMembership.objects \
            .filter(member_tools_exp_date__year = two_weeks_ago.year) \
            .filter(member_tools_exp_date__month = two_weeks_ago.month) \
            .filter(member_tools_exp_date__day = two_weeks_ago.day) \
            .filter(complimentary = False) \
            .filter(org_sub_admin=False) \
            .filter(org_sub = None) \
            .filter(user__is_active = True) \
            .exclude(last_homecoming_email__gte = last_six_days)

        if expired_members:
            emails = []
            for membership in expired_members:
                self.send_14d_comeback_email(membership)
                membership.last_homecoming_email = datetime.datetime.now()
                membership.save()
                emails.append("%s" % membership.user.email)

            email_string = ', '.join(["%s" % e for e in emails])
            results = "%s members received expired two weeks ago emails: %s" % (len(emails), email_string)
        else:
            results = "no members expired two weeks ago"

        #send email to staff with details of sending
        send_mail('2 Week Expired Emails Cron', '%s' % results, settings.DEFAULT_FROM_EMAIL,
                [settings.MEMBERSHIP_GROUP_EMAIL], fail_silently=False)


    def send_user_30d_conversion_email(self):
        thirty_days_ago = datetime.datetime.today() - datetime.timedelta(30)

        new_30d_users = [user for user in RhizomeUser.objects \
            .filter(date_joined__day = thirty_days_ago.day) \
            .filter(date_joined__month = thirty_days_ago.month) \
            .filter(date_joined__year = thirty_days_ago.year) \
            .filter(is_active = True) \
            if user.get_profile().is_member() == False]

        if new_30d_users:
            emails = []
            for user in new_30d_users:
                self.send_30_day_user_conversion_email(user)
                emails.append("%s" % user.email)

            email_string = ', '.join(["%s" % e for e in emails])
            results = "%s 30 day user to member conversion emails sent: %s" % (len(emails), email_string)
        else:
            results = "no 30 day user to member conversion emails sent"

        #send email to staff with details of sending
        send_mail('60 day user to member conversion emails', '%s' % results, settings.DEFAULT_FROM_EMAIL,
                [settings.MEMBERSHIP_GROUP_EMAIL], fail_silently=False)

    def send_user_60d_conversion_email(self):
        sixty_days_ago = datetime.datetime.today() - datetime.timedelta(60)

        new_60d_users = [user for user in RhizomeUser.objects \
            .filter(date_joined__day = sixty_days_ago.day) \
            .filter(date_joined__month = sixty_days_ago.month) \
            .filter(date_joined__year = sixty_days_ago.year) \
            .filter(is_active = True) \
            if user.get_profile().is_member() == False]

        if new_60d_users:
            emails = []

            for user in new_60d_users:
                self.send_60_day_user_conversion_email(user)
                emails.append("%s" % user.email)

            email_string = ', '.join(["%s" % e for e in emails])
            results = "%s 60 day user to member conversion emails sent: %s" % (len(emails), email_string)
        else:
            results = "no 60 day user to member conversion emails sent"

        #send email to staff with details of sending
        send_mail('60 day user to member conversion emails', '%s' % results, settings.DEFAULT_FROM_EMAIL,
                [settings.MEMBERSHIP_GROUP_EMAIL], fail_silently=False)

    ## MEMBERSHIP EMAIL SENDING FUNCTIONS
    def send_30day_till_expired_email(self, membership):
        email = EmailMultiAlternatives()
        email.subject = "30 days until your Rhizome Membership expires!"
        email.to = [membership.user.email]
        email.bcc = [settings.MEMBERSHIP_GROUP_EMAIL]
        email.from_email = settings.MEMBERSHIP_GROUP_EMAIL

        content = {
                "user": membership.user,
                "email_body": AutoGeneratedEmail.objects.get(email_title = '30_day_renewal').email_body
                }
        plaintext_template = get_template('accounts/emails/renewal_email_30day.txt')
        plaintext_message = plaintext_template.render(Context(content))

        html_template = get_template('accounts/emails/renewal_email_30day.html')
        html_message = html_template.render(Context(content))

        #send plaintext and html version
        email.attach_alternative(html_message, "text/html")
        email.send(fail_silently=False)

    def send_15day_till_expired_email(self, membership):
        email = EmailMultiAlternatives()
        email.subject = "Only 15 days until your Rhizome Membership expires!"
        email.to = [membership.user.email]
        email.bcc = [settings.MEMBERSHIP_GROUP_EMAIL]
        email.from_email = settings.MEMBERSHIP_GROUP_EMAIL

        content = {
                "user": membership.user,
                "email_body": AutoGeneratedEmail.objects.get(email_title = '15_day_renewal').email_body
                }

        plaintext_template = get_template('accounts/emails/renewal_email_15day.txt')
        plaintext_message = plaintext_template.render(Context(content))

        html_template = get_template('accounts/emails/renewal_email_15day.html')
        html_message = html_template.render(Context(content))

        #send plaintext and html version
        email.attach_alternative(html_message, "text/html")
        email.send(fail_silently=False)

    def send_expires_today_email(self, membership):
        email = EmailMultiAlternatives()
        email.subject = "Your Rhizome Membership Expires Today!"
        email.to = [membership.user.email]
        email.bcc = [settings.MEMBERSHIP_GROUP_EMAIL]
        email.from_email = settings.MEMBERSHIP_GROUP_EMAIL

        content = {
            "user": membership.user,
            "email_body": AutoGeneratedEmail.objects.get(email_title = 'day_of_renewal').email_body
        }

        plaintext_template = get_template('accounts/emails/renewal_email_expired.txt')
        plaintext_message = plaintext_template.render(Context(content))

        html_template = get_template('accounts/emails/renewal_email_expired.html')
        html_message = html_template.render(Context(content))

        #send plaintext and html version
        email.attach_alternative(html_message, "text/html")
        email.send(fail_silently=False)

    def send_14d_comeback_email(self, membership):
        email = EmailMultiAlternatives()
        email.subject = "We want you back!"
        email.to = [membership.user.email]
        email.bcc = [settings.MEMBERSHIP_GROUP_EMAIL]
        email.from_email = settings.MEMBERSHIP_GROUP_EMAIL

        content = {
            "user": membership.user,
            "email_body": AutoGeneratedEmail.objects.get(email_title = 'comeback_email').email_body
        }

        plaintext_template = get_template('accounts/emails/renewal_email_comeback.txt')
        plaintext_message = plaintext_template.render(Context(content))

        html_template = get_template('accounts/emails/renewal_email_comeback.html')
        html_message = html_template.render(Context(content))

        #send plaintext and html version
        email.attach_alternative(html_message, "text/html")
        email.send(fail_silently=False)

    ####
    # USER CONVERSION EMAILS EMAILS
    ####

    def send_30_day_user_conversion_email(self, user):
        # sent 30 days after signup
        email = EmailMultiAlternatives()
        email.subject = "Support Rhizome by Becoming a Member!"
        email.to = [user.email]
        email.bcc = [settings.MEMBERSHIP_GROUP_EMAIL]
        email.from_email = settings.MEMBERSHIP_GROUP_EMAIL

        content = {
            "user": user,
            "email_body": AutoGeneratedEmail.objects.get(email_title = '30_day_conversion').email_body
        }

        plaintext_template = get_template('accounts/emails/conversion_email_30day.txt')
        plaintext_message = plaintext_template.render(Context(content))

        html_template = get_template('accounts/emails/conversion_email_30day.html')
        html_message = html_template.render(Context(content))

        #send plaintext and html version
        email.attach_alternative(html_message, "text/html")
        email.send(fail_silently=False)

    def send_60_day_user_conversion_email(self, user):
        # sent 60 days after signup
        email = EmailMultiAlternatives()
        email.subject = "Support Rhizome by Becoming a Member!"
        email.to = [user.email]
        email.bcc = [settings.MEMBERSHIP_GROUP_EMAIL]
        email.from_email = settings.MEMBERSHIP_GROUP_EMAIL

        content = {
            "user": user,
            "email_body": AutoGeneratedEmail.objects.get(email_title = '60_day_conversion').email_body
        }

        plaintext_template = get_template('accounts/emails/conversion_email_60day.txt')
        plaintext_message = plaintext_template.render(Context(content))

        html_template = get_template('accounts/emails/conversion_email_60day.html')
        html_message = html_template.render(Context(content))

        #send plaintext and html version
        email.attach_alternative(html_message, "text/html")
        email.send(fail_silently=False)
